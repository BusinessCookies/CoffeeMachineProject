<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

use AppBundle\Entity\Data;
use AppBundle\Form\DataType;

class RaspiController extends Controller
{
    /**
     * @Route("/raspi/getAdminData", name="raspi_getadmindata")
     */
    public function getAdminData(Request $request)
    {
      $repository = $this->getDoctrine()->getManager()->getRepository('AppBundle:Data');
      $admindata = $repository->findOneByFile("Admin");
      if (null === $admindata) {
        throw new NotFoundHttpException("Could not find the file admin");
      }
      return $this->render('AppBundle:Raspi:getAdminData.html.twig', array('admindata' => $admindata->GetData()));
    }
    
     /**
     * @Route("/raspi/addDateData", name="raspi_adddatedata")
     */
    public function addDateData(Request $request)
    {
      $data = new Data();
      $form = $this->get('form.factory')->create(new DataType(), $data);
      if ($form->handleRequest($request)->isValid()) {
        // Update Date Data
        $repository = $this->getDoctrine()->getManager()->getRepository('AppBundle:Data');
        $datedata = $repository->findOneByFile("Date");
        $newData = $datedata->GetData();
        if(substr($newData, -1) != "\n" && $newData != "")
        {
          $newData = $newData."\n";
        }
        $newData = $newData.$data->GetData();
        $datedata->SetData($newData);
        
        // Update Admin Data
        $admindata = $repository->findOneByFile("Admin");
        $csvadmin = $this->parseCSV($admindata->GetData(), ";", "\n");
        $csvdate = $this->parseCSV($data->GetData(), ";", "\n");
        foreach($csvdate as $eda)
        {
          foreach($csvadmin as &$ead)
          {
            if($eda[1] === $ead[0])
            {
			  $actualmoney = floatval($ead[2]);
			  $toremove = ($actualmoney<=0)*0.40 + ($actualmoney>0)*0.25;
              $ead[2] = number_format($actualmoney - $toremove,2,'.','');
            }
          }
        }
        $admindata->SetData($this->unparseCSV($csvadmin, ";", "\n"));
        $em = $this->getDoctrine()->getManager();
        $em->persist($datedata);
        $em->persist($admindata);
        $em->flush();
        $request->getSession()->getFlashBag()->add('notice', 'Valid');
        return $this->redirect($this->generateUrl('raspi_getadmindata'));
      }
      return $this->render('AppBundle:Raspi:addDateData.html.twig', array('form' => $form->createView()));
    }
    
    
    private function parseCSV($CsvString, $delimiter, $stopper)
    {
      $Data = explode($stopper, $CsvString); //parse the rows
      foreach($Data as &$Row)
      {
       $Row = explode($delimiter, $Row); //parse the items in rows 
      }
      return $Data;
    }
    
    private function unparseCSV($CsvString, $delimiter, $stopper)
    {
      $string = "";
      foreach($CsvString as &$line)
      {
        $substring = "";
        $iter = 0;
        foreach($line as &$c)
        {
          if($iter!=0)
          {
            $substring = $substring.$delimiter;
          }
          $substring = $substring.$c;
          $iter=$iter+1;
        }
       $string = $string.$substring.$stopper;
      }
      return $string;
    }
    
    /*
    
    public function raspi2dbAction()
    {
        $request = $this->getRequest();
        $content = $request->getContent();
        $param = NULL;
        if(!empty($content))
        {
          $param = json_decode($content,true);
        }       
        if($param != NULL)
        {
          // decode JSON and update database
          $em = $this->getDoctrine()->getManager();
          foreach($param as $value)
          {
            $data = new Data();
            $data->setFile("date.csv");
            $data->setJson(json_encode($value));
            $em->persist($data);
          }
          $em->flush();
          $response = "valid";
        }else{
          $response = "Error: json content not valid";
        }
        return new Response($response);
    }
    
 
    public function db2raspiAction()
    {
      $serializer = new Serializer(array(new ObjectNormalizer()), array(new JsonEncoder()));
      
      // Pour récupérer le service UserManager du bundle
      $userManager = $this->get('fos_user.user_manager');

      // Pour récupérer la liste de tous les utilisateurs
      $users = $userManager->findUsers();
      
      $jsonContent = $serializer->serialize($users, 'json');
      
      $response = new Response();
      $response->setContent($jsonContent);
      $response->headers->set('Content-Type', 'application/json');
      $response = "Function not implemented";
      return $response;
    } */
}
